#include <QDebug>
#include <iostream>
#include <math.h>

#include "gameManager.h"

GameManager::GameManager(QObject *parent) : QObject(parent)
{

}

/**
 * Определяет новый статус Марио
 * @param xVelocity скорость по X
 * @param yVelocity скорость по Y
 * @param oldStatus старый статус
 * @returns новый статус
 */
QString GameManager::marioStatus(int xVelocity, int yVelocity, QString oldStatus)
{
    QString newStatus = oldStatus;

    if (yVelocity == 0) {
        if (xVelocity != 0 ) {
            if (xVelocity > 0) {
                if (oldStatus != "StopRight") newStatus = "StopRight";
                else newStatus = "MoveRight";
            } else {
                if (oldStatus != "StopLeft") newStatus = "StopLeft";
                else newStatus = "MoveLeft";
            }
        } else {
            if (oldStatus == "MoveRight") newStatus = "StopRight";
            else if (oldStatus == "MoveLeft") newStatus = "StopLeft";
        }
    } else {
        if (xVelocity != 0) {
            if (xVelocity > 0) newStatus = "MoveRight";
            else newStatus = "MoveLeft";
        } else {
            if (oldStatus == "StopRight" || oldStatus == "MoveRight") newStatus = "MoveRight";
            else newStatus = "MoveLeft";
        }
    }

    return newStatus;
}

/**
 * Изменяет координаты и скорость Марио в зависимости ок коллизии
 * @param marioWidth ширина Марио
 * @param marioHeight высота Марио
 * @param marioX координата X Марио
 * @param marioY координата Y Марио
 * @param marioXVelocity скорость Марио по X
 * @param marioYVelocity скорость Марио по Y
 * @param objects вектор объектов
 * @returns вектор новых значений для Марио
 * ([0] - новый X, [1] - новый Y, [2] - новый yVelocity, [3] - сторона коллизии по Y)
 */
QVector<int> GameManager::objectsCollision(int marioWidth, int marioHeight, int marioX, int marioY, int marioXVelocity, int marioYVelocity, QVector<int> objects)
{
    int i, j, count, sideX, sideY, distanceX, distanceY;
    j = 3, count = objects[0], sideX = 0, sideY = 0;

    // Старый X Марио
    int marioXOld;
    marioXOld = marioX;

    // Размеры объектов
    int objectWidth, objectHeight;
    objectWidth = objects[1], objectHeight = objects[2];

    // Вектор новых координат, скорости по вертикали и стороны коллизии
    QVector<int> collis = { marioX, marioY, marioYVelocity, 0};

    // Коллизии нет, если размеры не больше 0
    if (marioWidth <= 0 || marioHeight <= 0 || objectWidth <= 0 || objectHeight <= 0)
        return collis;

    // Для каждого объекта
    for (i = 0; i < count; i++) {
        // Если одновременная коллизия по двум координатам
        if (xCollision(marioWidth, marioX, objectWidth, objects[j])
         && yCollision(marioHeight, marioY, objectHeight, objects[j+1])) {

            // Расстояние между объектами
            distanceX = abs((marioX + marioWidth / 2) - (objects[j] + objectWidth / 2)) - marioWidth / 2 - objectWidth / 2;
            distanceY = abs((marioY + marioHeight / 2) - (objects[j+1] + objectHeight / 2)) - marioHeight / 2 - objectHeight / 2;

            // Определяем сторону коллизии по горизонтали
            // (1 - право объекта, 2 - лево)
            if (distanceX < 0 && marioYVelocity == 0) {
                if (distanceX - marioXVelocity >= 0) sideX = 1;
                else if (distanceX + marioXVelocity >= 0) sideX = 2;
            } else if (distanceX <= 0){
                if (distanceX - marioXVelocity >= 0) { sideX = 1; marioX++; distanceY = 0; }
                else if (distanceX + marioXVelocity >= 0) { sideX = 2; marioX--; distanceY = 0; }
            }

            // Определяем сторону коллизии по вертикали
            // (1 - верх объекта, 2 - низ)
            if (distanceY < 0) {
                if (distanceY + marioYVelocity >= 0) sideY = 1;
                else if (distanceY - marioYVelocity >= 0) sideY = 2;
            }

            // Меняем координаты по X
            switch(sideX) {
            case 1:
                marioX = marioX - distanceX;
                break;
            case 2:
                marioX = marioX + distanceX;
                break;
            }

            // Меняем координаты и скорость по Y
            switch(sideY) {
            case 1:
                marioY = marioY + distanceY;
                marioYVelocity = 0;
                break;
            case 2:
                marioY = marioY - distanceY;
                marioYVelocity = 0;
                break;
            }

            // Если объект в Марио
            if (objects[j] > marioX && objects[j] < marioX + marioWidth && marioXVelocity != 0) {
                marioX--;
            }
            // Сохраняем новые координаты
            collis[0] = marioX;
            collis[1] = marioY;

            // Сохраняем новую скорость по Y и сторону вертикальной коллизии
            collis[2] = marioYVelocity;
            collis[3] = sideY;

            // Обнуляем стороны коллизии
            sideX = 0;
            sideY = 0;
        }

        // Следующий объект
        j += 2;
    }

    return collis;
}

/**
 * Изменяет вектор с монетками в зависимости от коллизии
 * @param marioWidth ширина Марио
 * @param marioHeight высота Марио
 * @param marioX координата X Марио
 * @param marioY координата Y Марио
 * @param objects вектор объектов
 * @returns новый вектор с монетками
 */
QVector<int> GameManager::coinsCollision(int marioWidth, int marioHeight, int marioX, int marioY, QVector<int> objects)
{
    int i, j, count;
    j = 3, count = objects.value(0);

    // Размеры объектов
    int objectWidth, objectHeight;
    objectWidth = objects.value(1), objectHeight = objects.value(2);

    // Коллизии нет, если размеры не больше 0
    if (marioWidth <= 0 || marioHeight <= 0 || objectWidth <= 0 || objectHeight <= 0)
        return objects;

    // Для каждого объекта
    for (i = 0; i < count; i++) {
        // Если одновременная коллизия по двум координатам
        if (xCollision(marioWidth, marioX, objectWidth, objects.value(j))
         && yCollision(marioHeight, marioY, objectHeight, objects.value(j+1))) {

           // "Собираем" монетку
           objects.remove(j);
           objects.remove(j);

           j -= 2;
           i--;
           count--;
           objects.replace(0, count);

        }

        // Следующий объект
        j += 2;
    }

    return objects;
}

/**
 * Определяет, произошла ли коллизия по Y
 * @param marioHeight высота Марио
 * @param marioY координата Y Марио
 * @param objectHeight высота объекта
 * @param objectY координата Y объекта
 * @returns true - если произошла, false - иначе
 */
bool GameManager::yCollision(int marioHeight, int marioY, int objectHeight, int objectY)
{
    // Высота всегда больше 0
    if (marioHeight <= 0 || objectHeight <= 0)
        return false;

    // Расстояние между центрами по Y
    int dy = abs((marioY + marioHeight / 2) - (objectY + objectHeight / 2));

    // Расстояние между объектами по Y
    double distanceY = dy - marioHeight / 2 - objectHeight / 2;

    // Если объекты соприкоснулись по Y
    if (distanceY < 0) {
        return true;
    }

    return false;
}

/**
 * Определяет, произошла ли коллизия по Y
 * @param marioWidth ширина Марио
 * @param marioX координата X Марио
 * @param objectWidth ширина объекта
 * @param objectX координата X объекта
 * @returns true - если произошла, false - иначе
 */
bool GameManager::xCollision(int marioWidth, int marioX, int objectWidth, int objectX)
{
    // Ширина всегда больше 0
    if (marioWidth <= 0 || objectWidth <= 0)
        return false;

    // Расстояние между центрами по X
    int dx = abs((marioX + marioWidth / 2) - (objectX + objectWidth / 2));

    // Расстояние между объектами по X
    int distanceX = dx - marioWidth / 2 - objectWidth / 2;

    // Если объекты соприкоснулись по X
    if (distanceX <= 0) {
        return true;
    }

    return false;
}

/**
 * Хранит векторы с данными
 * @param stage номер "ячейки"
 * @returns вектор данных
 */
QVector<int> GameManager::objectsStorage(int stage)
{
    QVector<int> objects;

    switch(stage) {
    // Экспериментальные карты
    case -5:
    {
        QVector<int> objects = {
            90, 32, 32,
            0, 836, 32, 836, 64, 836, 96, 836, 128, 836, 160, 836, 192, 836, 224, 836, 256, 836, 288, 836,
            320, 836, 352, 836, 384, 836, 416, 836, 448, 836, 480, 836, 512, 836, 544, 836, 576, 836, 608, 836,
            640, 836, 672, 836, 704, 836, 736, 836, 768, 836, 800, 836, 832, 836, 864, 836, 896, 836, 928, 836,
            960, 836, 992, 836, 1024, 836, 1056, 836, 1088, 836, 1120, 836, 1152, 836, 1184, 836, 1216, 836, 1248, 836,
            1280, 836, 1312, 836, 1344, 836, 1376, 836, 1408, 836, 1440, 836, 1472, 836, 1504, 836, 1536, 836, 1568, 836,
            288, 804, 288, 772, 288, 740, 288, 708, 288, 676, 288, 644, 288, 612, 288, 580, 288, 548, 288, 516,
            288, 484, 288, 452, 288, 420, 288, 388, 288, 356, 288, 324, 288, 292, 288, 260, 288, 228, 288, 196,
            1088, 804, 1088, 772, 1088, 740, 1088, 708, 1088, 676, 1088, 644, 1088, 612, 1088, 580, 1088, 548, 1088, 516,
            1088, 484, 1088, 452, 1088, 420, 1088, 388, 1088, 356, 1088, 324, 1088, 292, 1088, 260, 1088, 228, 1088, 196
        };
        return objects;
    }
    case -4:
    {
        QVector<int> objects = {
            70, 32, 32,
            0, 836, 32, 836, 64, 836, 96, 836, 128, 836, 160, 836, 192, 836, 224, 836, 256, 836, 288, 836,
            320, 836, 352, 836, 384, 836, 416, 836, 448, 836, 480, 836, 512, 836, 544, 836, 576, 836, 608, 836,
            640, 836, 672, 836, 704, 836, 736, 836, 768, 836, 800, 836, 832, 836, 864, 836, 896, 836, 928, 836,
            960, 836, 992, 836, 1024, 836, 1056, 836, 1088, 836, 1120, 836, 1152, 836, 1184, 836, 1216, 836, 1248, 836,
            1280, 836, 1312, 836, 1344, 836, 1376, 836, 1408, 836, 1440, 836, 1472, 836, 1504, 836, 1536, 836, 1568, 836,
            1260, 580, 1260, 548, 1260, 516, 1260, 484, 1260, 452, 1260, 420, 1260, 388, 1260, 356, 1260, 324, 1260, 292,
            1100, 600, 1132, 600, 1164, 600, 1196, 600, 1228, 600, 1260, 600, 1292, 600, 1324, 600, 1356, 600, 1388, 600
        };
        return objects;
    }
    case -3:
    {
        QVector<int> objects = {
            138, 32, 32,
            0, 612, 32, 612, 64, 612, 96, 612, 128, 612, 160, 612, 192, 612, 224, 612, 256, 612, 288, 612,
            320, 612, 352, 612, 384, 612, 416, 612, 448, 612, 480, 612, 512, 612, 544, 612, 576, 612, 608, 612,
            640, 612, 672, 612, 704, 612, 736, 612, 768, 612, 800, 612, 832, 612, 864, 612, 896, 612, 928, 612,
            960, 612, 992, 612, 1024, 612, 1056, 612, 1088, 612, 1120, 612, 1152, 612, 1184, 612, 1216, 612, 1248, 612,
            1280, 612, 1312, 612, 1344, 612, 1376, 612, 1408, 612, 1440, 612, 1472, 612, 1504, 612, 1536, 612, 1568, 612,
            0, 836, 32, 836, 64, 836, 96, 836, 128, 836, 160, 836, 192, 836, 224, 836, 256, 836, 288, 836,
            320, 836, 352, 836, 384, 836, 416, 836, 448, 836, 480, 836, 512, 836, 544, 836, 576, 836, 608, 836,
            640, 836, 672, 836, 704, 836, 736, 836, 768, 836, 800, 836, 832, 836, 864, 836, 896, 836, 928, 836,
            960, 836, 992, 836, 1024, 836, 1056, 836, 1088, 836, 1120, 836, 1152, 836, 1184, 836, 1216, 836, 1248, 836,
            1280, 836, 1312, 836, 1344, 836, 1376, 836, 1408, 836, 1440, 836, 1472, 836, 1504, 836, 1536, 836, 1568, 836,
            288, 804, 288, 772, 288, 740, 288, 708, 288, 676, 288, 644, 288, 580, 288, 548, 288, 516,
            288, 484, 288, 452, 288, 420, 288, 388, 288, 356, 288, 324, 288, 292, 288, 260, 288, 228, 288, 196,
            1088, 804, 1088, 772, 1088, 740, 1088, 708, 1088, 676, 1088, 644, 1088, 580, 1088, 548, 1088, 516,
            1088, 484, 1088, 452, 1088, 420, 1088, 388, 1088, 356, 1088, 324, 1088, 292, 1088, 260, 1088, 228, 1088, 196
        };
        return objects;
    }
    case -2:
    {
        QVector<int> objects = {
            40, 32, 32,
            300, 900, 300, 868, 300, 836, 300, 804, 300, 772, 300, 740, 300, 708, 300, 676, 300, 644, 300, 612,
            300, 580, 300, 548, 300, 516, 300, 484, 300, 452, 300, 420, 300, 388, 300, 356, 300, 324, 300, 292,
            1100, 900, 1100, 868, 1100, 836, 1100, 804, 1100, 772, 1100, 740, 1100, 708, 1100, 676, 1100, 644, 1100, 612,
            1100, 580, 1100, 548, 1100, 516, 1100, 484, 1100, 452, 1100, 420, 1100, 388, 1100, 356, 1100, 324, 1100, 292
        };
        return objects;
    }
    case -1:
    {
        QVector<int> objects = {
            100, 32, 32,
            0, 600, 32, 600, 64, 600, 96, 600, 128, 600, 160, 600, 192, 600, 224, 600, 256, 600, 288, 600,
            320, 600, 352, 600, 384, 600, 416, 600, 448, 600, 480, 600, 512, 600, 544, 600, 576, 600, 608, 600,
            640, 600, 672, 600, 704, 600, 736, 600, 768, 600, 800, 600, 832, 600, 864, 600, 896, 600, 928, 600,
            960, 600, 992, 600, 1024, 600, 1056, 600, 1088, 600, 1120, 600, 1152, 600, 1184, 600, 1216, 600, 1248, 600,
            1280, 600, 1312, 600, 1344, 600, 1376, 600, 1408, 600, 1440, 600, 1472, 600, 1504, 600, 1536, 600, 1568, 600,
            0, 836, 32, 836, 64, 836, 96, 836, 128, 836, 160, 836, 192, 836, 224, 836, 256, 836, 288, 836,
            320, 836, 352, 836, 384, 836, 416, 836, 448, 836, 480, 836, 512, 836, 544, 836, 576, 836, 608, 836,
            640, 836, 672, 836, 704, 836, 736, 836, 768, 836, 800, 836, 832, 836, 864, 836, 896, 836, 928, 836,
            960, 836, 992, 836, 1024, 836, 1056, 836, 1088, 836, 1120, 836, 1152, 836, 1184, 836, 1216, 836, 1248, 836,
            1280, 836, 1312, 836, 1344, 836, 1376, 836, 1408, 836, 1440, 836, 1472, 836, 1504, 836, 1536, 836, 1568, 836
        };
        return objects;
    }
    // Генераторы карты
    case 0:
    {
        int i;
        int x = 8704, y = 900;
        for (i = 0; i < 100; i++) {
            if (i % 10 == 0) std::cout << '\n';
            std::cout << x << ", " << y << ", ";
            x = x + 0;
            y = y - 32;
            if (y < 0) break;
        }
        std::cout << '\n' << i << '\n';
        break;
    }
    case 10:
    {
        int i, j, k = 0;
        int x = 8672, y = 324;
        for (i = 0; i < 10000; i++) {
            x = 6848;
            for (j = 0; j < 10000; j++) {
                if (j > i * 2) break;
                std::cout << x << ", " << y << ", ";
                if (j % 10 == 0) std::cout << '\n';
                k++;
                x = x + 32;
            }
            y = y + 32;
            if (y >= 900) break;
            std::cout << '\n';
        }
        std::cout << '\n' << k << '\n';
        break;
    }
    // 1 тип карты
    case 1:
    {
        QVector<int> objects = {
            757, 32, 32,
            -32, 900, -32, 868, -32, 836, -32, 804, -32, 772, -32, 740, -32, 708, -32, 676, -32, 644, -32, 612,
            -32, 580, -32, 548, -32, 516, -32, 484, -32, 452, -32, 420, -32, 388, -32, 356, -32, 324, -32, 292,
            -32, 260, -32, 228, -32, 196, -32, 164, -32, 132, -32, 100, -32, 68, -32, 36, -32, 4,
            0, 836, 32, 836, 64, 836, 96, 836, 128, 836, 160, 836, 192, 836, 224, 836, 256, 836, 288, 836,
            320, 836, 352, 836, 384, 836, 416, 836, 448, 836, 480, 836, 512, 836, 544, 836, 576, 836, 608, 836,
            640, 836, 672, 836, 704, 836, 736, 836, 768, 836, 800, 836, 832, 836, 864, 836, 896, 836, 928, 836,
            960, 836, 992, 836, 1024, 836, 1056, 836, 1088, 836, 1120, 836, 1152, 836, 1184, 836, 1216, 836, 1248, 836,
            1280, 836, 1312, 836, 1344, 836, 1376, 836, 1408, 836, 1440, 836, 1472, 836, 1504, 836, 1536, 836, 1568, 836,
            0, 868, 32, 868, 64, 868, 96, 868, 128, 868, 160, 868, 192, 868, 224, 868, 256, 868, 288, 868,
            320, 868, 352, 868, 384, 868, 416, 868, 448, 868, 480, 868, 512, 868, 544, 868, 576, 868, 608, 868,
            640, 868, 672, 868, 704, 868, 736, 868, 768, 868, 800, 868, 832, 868, 864, 868, 896, 868, 928, 868,
            960, 868, 992, 868, 1024, 868, 1056, 868, 1088, 868, 1120, 868, 1152, 868, 1184, 868, 1216, 868, 1248, 868,
            1280, 868, 1312, 868, 1344, 868, 1376, 868, 1408, 868, 1440, 868, 1472, 868, 1504, 868, 1536, 868, 1568, 868,
            1824, 868, 1856, 868, 1888, 868, 1920, 868, 1952, 868, 1984, 868, 2016, 868,
            2272, 868, 2304, 868, 2336, 868, 2368, 868, 2400, 868, 2432, 868, 2464, 868,
            2720, 868, 2752, 868, 2784, 868, 2816, 868, 2848, 868,
            2880, 868, 2912, 868, 2944, 868, 2976, 868, 3008, 868, 3040, 868, 3072, 868, 3104, 868, 3136, 868, 3168, 868,
            1824, 836, 1856, 836, 1888, 836, 1920, 836, 1952, 836, 1984, 836, 2016, 836,
            2272, 836, 2304, 836, 2336, 836, 2368, 836, 2400, 836, 2432, 836, 2464, 836,
            2720, 836, 2752, 836, 2784, 836,
            2816, 836, 2848, 836, 2880, 836, 2912, 836, 2944, 836, 2976, 836, 3008, 836, 3040, 836, 3072, 836, 3104, 836,
            3136, 836, 3168, 836,
            3424, 612, 3456, 612, 3488, 612, 3520, 612, 3552, 612, 3584, 612, 3616, 612,
            3904, 388, 3936, 388, 3968, 388, 4000, 388, 4032, 388, 4064, 388, 4096, 388,
            3904, 132, 3936, 132, 3968, 132, 4000, 132, 4032, 132, 4064, 132, 4096, 132,
            4288, 708, 4320, 708, 4352, 708, 4384, 708, 4416, 708, 4448, 708, 4480, 708,
            4288, 1100, 4320, 1100, 4352, 1100, 4384, 1100, 4416, 1100, 4448, 1100, 4480, 1100,
            5312, 612, 5344, 612, 5376, 612, 5408, 612,
            5600, 324, 5632, 324, 5664, 324, 5696, 324,
            6080, 324, 6112, 324, 6144, 324, 6176, 324,
            6400, 196, 6432, 196,
            4736, 836, 4768, 836, 4800, 836, 4832, 836, 4864, 836, 4896, 836, 4928, 836, 4960, 836, 4992, 836, 5024, 836,
            5056, 836, 5088, 836, 5120, 836, 5152, 836, 5184, 836, 5216, 836, 5248, 836, 5280, 836, 5312, 836, 5344, 836,
            5376, 836, 5408, 836, 5440, 836, 5472, 836, 5504, 836, 5536, 836, 5568, 836, 5600, 836, 5632, 836, 5664, 836,
            5696, 836, 5728, 836, 5760, 836, 5792, 836, 5824, 836, 5856, 836, 5888, 836, 5920, 836, 5952, 836, 5984, 836,
            6016, 836, 6048, 836, 6080, 836, 6112, 836, 6144, 836, 6176, 836, 6208, 836, 6240, 836, 6272, 836, 6304, 836,
            6336, 836, 6368, 836, 6400, 836, 6432, 836, 6464, 836, 6496, 836, 6528, 836, 6560, 836, 6592, 836, 6624, 836,
            4736, 868, 4768, 868, 4800, 868, 4832, 868, 4864, 868, 4896, 868, 4928, 868, 4960, 868, 4992, 868, 5024, 868,
            5056, 868, 5088, 868, 5120, 868, 5152, 868, 5184, 868, 5216, 868, 5248, 868, 5280, 868, 5312, 868, 5344, 868,
            5376, 868, 5408, 868, 5440, 868, 5472, 868, 5504, 868, 5536, 868, 5568, 868, 5600, 868, 5632, 868, 5664, 868,
            5696, 868, 5728, 868, 5760, 868, 5792, 868, 5824, 868, 5856, 868, 5888, 868, 5920, 868, 5952, 868, 5984, 868,
            6016, 868, 6048, 868, 6080, 868, 6112, 868, 6144, 868, 6176, 868, 6208, 868, 6240, 868, 6272, 868, 6304, 868,
            6336, 868, 6368, 868, 6400, 868, 6432, 868, 6464, 868, 6496, 868, 6528, 868, 6560, 868, 6592, 868, 6624, 868,
            6656, 900, 6656, 868, 6656, 836, 6656, 804, 6656, 772, 6656, 740, 6656, 708, 6656, 676, 6656, 644, 6656, 612,
            6656, 580, 6656, 548, 6656, 516, 6656, 484, 6656, 452, 6656, 420, 6656, 388, 6656, 356,
            6688, 900, 6688, 868, 6688, 836, 6688, 804, 6688, 772, 6688, 740, 6688, 708, 6688, 676, 6688, 644, 6688, 612,
            6688, 580, 6688, 548, 6688, 516, 6688, 484, 6688, 452, 6688, 420, 6688, 388, 6688, 356,
            6720, 900, 6720, 868, 6720, 836, 6720, 804, 6720, 772, 6720, 740, 6720, 708, 6720, 676, 6720, 644, 6720, 612,
            6720, 580, 6720, 548, 6720, 516, 6720, 484, 6720, 452, 6720, 420, 6720, 388, 6720, 356,
            6752, 900, 6752, 868, 6752, 836, 6752, 804, 6752, 772, 6752, 740, 6752, 708, 6752, 676, 6752, 644, 6752, 612,
            6752, 580, 6752, 548, 6752, 516, 6752, 484, 6752, 452, 6752, 420, 6752, 388, 6752, 356,
            6784, 900, 6784, 868, 6784, 836, 6784, 804, 6784, 772, 6784, 740, 6784, 708, 6784, 676, 6784, 644, 6784, 612,
            6784, 580, 6784, 548, 6784, 516, 6784, 484, 6784, 452, 6784, 420, 6784, 388, 6784, 356,
            6816, 900, 6816, 868, 6816, 836, 6816, 804, 6816, 772, 6816, 740, 6816, 708, 6816, 676, 6816, 644, 6816, 612,
            6816, 580, 6816, 548, 6816, 516, 6816, 484, 6816, 452, 6816, 420, 6816, 388, 6816, 356,
            6656, 292, 6688, 292, 6720, 292, 6752, 292, 6784, 292, 6816, 292,
            6656, 324, 6688, 324, 6720, 324, 6752, 324, 6784, 324, 6816, 324, 6848, 324,
            6848, 356, 6880, 356, 6848, 388,
            6880, 388, 6912, 388, 6848, 420,
            6880, 420, 6912, 420, 6944, 420,
            6848, 452,
            6880, 452, 6912, 452, 6944, 452, 6976, 452,
            6848, 484,
            6880, 484, 6912, 484, 6944, 484, 6976, 484, 7008, 484,
            6848, 516,
            6880, 516, 6912, 516, 6944, 516, 6976, 516, 7008, 516, 7040, 516,
            6848, 548,
            6880, 548, 6912, 548, 6944, 548, 6976, 548, 7008, 548, 7040, 548, 7072, 548,
            6848, 580,
            6880, 580, 6912, 580, 6944, 580, 6976, 580, 7008, 580, 7040, 580, 7072, 580, 7104, 580,
            6848, 612,
            6880, 612, 6912, 612, 6944, 612, 6976, 612, 7008, 612, 7040, 612, 7072, 612, 7104, 612, 7136, 612,
            6848, 644,
            6880, 644, 6912, 644, 6944, 644, 6976, 644, 7008, 644, 7040, 644, 7072, 644, 7104, 644, 7136, 644, 7168, 644,
            6848, 676,
            6880, 676, 6912, 676, 6944, 676, 6976, 676, 7008, 676, 7040, 676, 7072, 676, 7104, 676, 7136, 676, 7168, 676,
            7200, 676, 6848, 708,
            6880, 708, 6912, 708, 6944, 708, 6976, 708, 7008, 708, 7040, 708, 7072, 708, 7104, 708, 7136, 708, 7168, 708,
            7200, 708, 7232, 708, 6848, 740,
            6880, 740, 6912, 740, 6944, 740, 6976, 740, 7008, 740, 7040, 740, 7072, 740, 7104, 740, 7136, 740, 7168, 740,
            7200, 740, 7232, 740, 7264, 740, 6848, 772,
            6880, 772, 6912, 772, 6944, 772, 6976, 772, 7008, 772, 7040, 772, 7072, 772, 7104, 772, 7136, 772, 7168, 772,
            7200, 772, 7232, 772, 7264, 772, 7296, 772, 6848, 804,
            6880, 804, 6912, 804, 6944, 804, 6976, 804, 7008, 804, 7040, 804, 7072, 804, 7104, 804, 7136, 804, 7168, 804,
            7200, 804, 7232, 804, 7264, 804, 7296, 804, 7328, 804, 6848, 836,
            6880, 836, 6912, 836, 6944, 836, 6976, 836, 7008, 836, 7040, 836, 7072, 836, 7104, 836, 7136, 836, 7168, 836,
            7200, 836, 7232, 836, 7264, 836, 7296, 836, 7328, 836, 7360, 836, 7392, 836, 6848, 868,
            6880, 868, 6912, 868, 6944, 868, 6976, 868, 7008, 868, 7040, 868, 7072, 868, 7104, 868, 7136, 868, 7168, 868,
            7200, 868, 7232, 868, 7264, 868, 7296, 868, 7328, 868, 7360, 868, 7392, 868,
            7424, 868, 7456, 868, 7488, 868, 7520, 868, 7552, 868, 7584, 868, 7616, 868, 7648, 868, 7680, 868, 7712, 868,
            7744, 868, 7776, 868, 7808, 868, 7840, 868, 7872, 868, 7904, 868, 7936, 868, 7968, 868, 8000, 868, 8032, 868,
            8064, 868, 8096, 868, 8128, 868, 8160, 868, 8192, 868, 8224, 868, 8256, 868, 8288, 868, 8320, 868, 8352, 868,
            8384, 868, 8416, 868, 8448, 868, 8480, 868, 8512, 868, 8544, 868, 8576, 868, 8608, 868, 8640, 868, 8672, 868,
            7424, 836, 7456, 836, 7488, 836, 7520, 836, 7552, 836, 7584, 836, 7616, 836, 7648, 836, 7680, 836, 7712, 836,
            7744, 836, 7776, 836, 7808, 836, 7840, 836, 7872, 836, 7904, 836, 7936, 836, 7968, 836, 8000, 836, 8032, 836,
            8064, 836, 8096, 836, 8128, 836, 8160, 836, 8192, 836, 8224, 836, 8256, 836, 8288, 836, 8320, 836, 8352, 836,
            8384, 836, 8416, 836, 8448, 836, 8480, 836, 8512, 836, 8544, 836, 8576, 836, 8608, 836, 8640, 836, 8672, 836,
            8704, 900, 8704, 868, 8704, 836, 8704, 804, 8704, 772, 8704, 740, 8704, 708, 8704, 676, 8704, 644, 8704, 612,
            8704, 580, 8704, 548, 8704, 516, 8704, 484, 8704, 452, 8704, 420, 8704, 388, 8704, 356, 8704, 324, 8704, 292,
            8704, 260, 8704, 228, 8704, 196, 8704, 164, 8704, 132, 8704, 100, 8704, 68, 8704, 36, 8704, 4
        };
        return objects;
    }
    // Расположение монеток
    case 2:
    {
        QVector<int> objects = {
            22, 80, 80,
            1936, 776, 2384, 776, 2832, 776, 3088, 776, 3536, 552, 4016, 328, 4016, 72, 4400, 648, 4400, 1040, 5376, 552,
            5664, 264, 6144, 264, 6752, 232, 6608, 776, 6608, 676, 6608, 576, 6508, 776, 6508, 676, 6508, 576, 6408, 776,
            6408, 676, 6408, 576

        };
        return objects;
    }
    }

    return objects;
}

// Всякое для дебага коллизии
/* qDebug()
{
//qDebug() << "distanceX = " << distanceX << " marioXVelocity = " << marioXVelocity
//qDebug() << "distanceY = " << distanceY << " marioYVelocity = " << marioYVelocity;
//qDebug() << '\n';
//qDebug() << "MarioOldX = " << marioXOld << " MarioNewX = " << marioX << " MarioOldY = " << marioYOld << " MarioNewY = " << marioY;
//qDebug() << "MarioOldVX = " << marioXVelocityOld << " MarioNewVX = " << marioXVelocity << " MarioOldVY = " << marioYVelocityOld << " MarioNewVY = " << marioYVelocity;
//qDebug() << "ObjectX = " << objects[j] << " ObjectY = " << objects[j+1] << " DistanceX = " << distanceX << " DistanceY = " << distanceY << " SideX = " << sideX << " SideY = " << sideY;
//qDebug("");
//qDebug() << "Y = " << abs(marioY - marioYOld) << " Velocity = " << abs(marioYVelocityOld);
//qDebug() << "new = " << marioY << " Old = " << marioYOld;
//qDebug() << "X = " << abs(marioX - marioXOld) << " VelocityOld = " << abs(marioXVelocityOld) << " Velocity = " << abs(marioXVelocity);
//qDebug() << "new = " << marioX << " Old = " << marioXOld;
}
*/
